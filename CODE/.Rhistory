tuneGrid = parmGrid)
mse <- function( data, lev = NULL, model = NULL){
c(my_mse=mean((data$obs  - data$pred)^2))
}
rm(sse)
m <- train(I(Price/1000) ~ .,
data = cars,
method = "gbm",
verbose = TRUE,
distribution = 'gaussian',
metric = "my_mse",
maximize = FALSE,
trControl = fitControl,
tuneGrid = parmGrid)
mse <- function( data, lev = NULL, model = NULL){
c(my_mse=mean((data$obs  - data$pred)^2))
}
fitControl <- trainControl(method = 'cv', number = 3, repeats = 1, summaryFunction = mse)
parmGrid <- expand.grid(n.trees = c(25,50), interaction.depth = 1:3, shrinkage = 0.1)
m <- train(I(Price/1000) ~ .,
data = cars,
method = "gbm",
verbose = TRUE,
distribution = 'gaussian',
metric = "my_mse",
maximize = FALSE,
trControl = fitControl,
tuneGrid = parmGrid)
m
m <- train(I(Price/1000) ~ .,
data = cars,
method = "gbm",
verbose = TRUE,
distribution = 'gamma',
metric = "my_mse",
maximize = FALSE,
trControl = fitControl,
tuneGrid = parmGrid)
m <- train(I(Price/1000) ~ .,
data = cars,
method = "gbm",
verbose = TRUE,
cv.folds = 0,
distribution = 'gamma',
metric = "my_mse",
maximize = FALSE,
trControl = fitControl,
tuneGrid = parmGrid)
m <- train(I(Price/1000) ~ .,
data = cars,
method = "gbm",
verbose = TRUE,
distribution = 'gamma',
metric = "my_mse",
maximize = FALSE,
trControl = fitControl,
tuneGrid = parmGrid)
m <- train(I(Price/1000) ~ .,
data = cars,
method = "gbm",
verbose = TRUE,
cv.folds = 3,
distribution = 'gamma',
metric = "my_mse",
maximize = FALSE,
trControl = fitControl,
tuneGrid = parmGrid)
fitControl <- trainControl(method = 'cv', number = 3, repeats = 1, summaryFunction = mse)
parmGrid <- expand.grid(n.trees = c(25,50), interaction.depth = 1:3, shrinkage = 0.1)
m <- train(I(Price/1000) ~ .,
data = cars,
method = "gbm",
verbose = TRUE,
cv.folds = 3,
distribution = 'gamma',
metric = "my_mse",
maximize = FALSE,
trControl = fitControl,
tuneGrid = parmGrid)
fitControl <- trainControl(method = 'cv', number = 3, repeats = 1, summaryFunction = mse)
parmGrid <- expand.grid(n.trees = c(25,50), interaction.depth = 1:3, shrinkage = 0.1)
m <- train(I(Price/1000) ~ .,
data = cars,
method = "gbm",
verbose = TRUE,
distribution = 'gamma',
metric = "my_mse",
maximize = FALSE,
trControl = fitControl,
tuneGrid = parmGrid)
summary(cars$Price)
sum(is.na(cars$Price))
m <- train(I(Price/1000) ~ .,
data = cars,
method = "gbm",
verbose = TRUE,
distribution = 'tweedie',
metric = "my_mse",
maximize = FALSE,
trControl = fitControl,
tuneGrid = parmGrid)
m <- train(I(Price/1000) ~ .,
data = cars,
method = "gbm",
verbose = TRUE,
distribution = 'gaussian',
metric = "my_mse",
maximize = FALSE,
trControl = fitControl,
tuneGrid = parmGrid)
.libPaths('C:/Users/scolm/Documents/R/library')
m <- gbm(I(Price/1000) ~ .,
distribution = 'gamma',
data = cars)
library(gbm)
m <- gbm(I(Price/1000) ~ .,
distribution = 'gamma',
data = cars)
m <- train(Price ~ .,
data = cars,
method = "gbm",
verbose = TRUE,
distribution = 'gaussian',
metric = "my_mse",
maximize = FALSE,
trControl = fitControl,
tuneGrid = parmGrid)
m
plot(m)
parmGrid
library(glmnet)
data(cars)
head(cars)
?data
data(cars, package="gbm")
library(gbm)
data(cars, package="survival")
data(cars, package="splines")
data(cars, package="lattice")
data(cars, package="parallel")
data(cars)
head(cars)
data(cars, package="caret")
head(cars)
detach("package:gbm", unload=TRUE)
data(,package="caret")
data()
library(caret)
data()
data(crimtab)
head(crimtab)
head(occupationalStatus)
rm(crimtab)
head(cars)
library(glmnet)
data(cars, package="caret")
head(cars)
?glmnet
?predict.glmnet
library(randomForest)
?randomForest
install.packages("SSOAP")
install.packages("c:/Users/scolm/Downloads/SSOAP_0.9-0.tar.gz", repos=NULL, type="source")
install.packages("XML")
install.packages("RCurl")
install.packages("SSOAP")
install.packages("SSOAP", repos = "http://www.omegahat.org/R",
dependencies = TRUE,
type = "source")
library(SSOAP)
library(XML)
library(RCurl)
wsdl <- getURL("https://www3.bcb.gov.br/sgspub/JSP/sgsgeral/FachadaWSSGS.wsdl",
ssl.verifypeer = FALSE)
wsdl
cat(wsdl)
doc <- xmlInternalTreeParse(wsdl)
doc
def <- processWSDL(doc)
def
ff <- genSOAPClientInterface(def = def)
getSeries <- function(codigos, data.ini = "01/01/1998", data.fim = "01/01/2011", remove.old = TRUE) {
xmlstr <- ff@functions$getValoresSeriesXML(codigos, data.ini, data.fim,
.opts = list(ssl.verifypeer = FALSE))
doc <- xmlInternalTreeParse(xmlstr)
cleanup <- xpathApply(doc,"//SERIE", function(s) {
id <- xmlGetAttr(s, "ID")
s1 <- xmlSApply(s, function(x) xmlSApply(x, xmlValue))
s1 <- t(s1)
dimnames(s1) <- list(NULL, dimnames(s1)[[2]])
df <- as.data.frame(s1, stringsAsFactors=FALSE)
df$SERIE <- id
df
})
df <- Reduce(rbind, cleanup)
df$data <- as.Date(sapply(strsplit(df$DATA, "/"),
function(x) paste(c(x[2:1], 1), collapse="-")), "%Y-%m-%d")
df$valor <- as.numeric(df$VALOR)
df$serie <- factor(df$SERIE)
if(remove.old){
df$BLOQUEADO <- NULL
df$SERIE <- NULL
df$DATA <- NULL
df$VALOR <- NULL
}
df
}
# Testing the function
codigos <- c(4606, 4607, 4608, 4609, 4610, 4611, 4612, 4613, 4614, 4615, 4616)
df <- getSeries(codigos)
getSeries <- function(codigos, data.ini = "01/01/2013", data.fim = "01/01/2014", remove.old = TRUE) {
xmlstr <- ff@functions$getValoresSeriesXML(codigos, data.ini, data.fim,
.opts = list(ssl.verifypeer = FALSE))
doc <- xmlInternalTreeParse(xmlstr)
cleanup <- xpathApply(doc,"//SERIE", function(s) {
id <- xmlGetAttr(s, "ID")
s1 <- xmlSApply(s, function(x) xmlSApply(x, xmlValue))
s1 <- t(s1)
dimnames(s1) <- list(NULL, dimnames(s1)[[2]])
df <- as.data.frame(s1, stringsAsFactors=FALSE)
df$SERIE <- id
df
})
df <- Reduce(rbind, cleanup)
df$data <- as.Date(sapply(strsplit(df$DATA, "/"),
function(x) paste(c(x[2:1], 1), collapse="-")), "%Y-%m-%d")
df$valor <- as.numeric(df$VALOR)
df$serie <- factor(df$SERIE)
if(remove.old){
df$BLOQUEADO <- NULL
df$SERIE <- NULL
df$DATA <- NULL
df$VALOR <- NULL
}
df
}
# Testing the function
codigos <- c(4606, 4607, 4608, 4609, 4610, 4611, 4612, 4613, 4614, 4615, 4616)
df <- getSeries(codigos)
ff@functions$getValoresSeriesXML
wsdl <- 'http://www.cbr.ru/secinfo/secinfo.asmx?WSDL'
doc  <- xmlInternalTreeParse(wsdl)
def <- processWSDL(doc)
ff  <- genSOAPClientInterface(def = def)
xmlstr.f <- ff@functions #gives the list of functions that can be accessed
xmlstr.f$GCurve('2012-10-10')
xmlstr.f$GCurve(as.dateTime('2012-10-10'))
xmlstr.f$GCurve
?as.Date
xmlstr.f$GCurve(strptime('2012-10-10', format = "%Y-%m-%d"))
kegg = processWSDL("http://soap.genome.jp/KEGG.wsdl")
wsdl <- "http://soap.genome.jp/KEGG.wsdl"
wsdl
doc  <- xmlInternalTreeParse(wsdl)
wsdl = processWSDL("~/Projects/org/omegahat/XML/SOAP/examples/ndfdXMLserver.wsdl")
wsdl = processWSDL("http://www.weather.gov/forecasts/xml/SOAP_server/ndfdXMLserver.php?wsdl")
iface = genSOAPClientInterface(def = wsdl)
x = iface@functions$LatLonListCityNames(2)
x
iface@functions
doc = xmlRoot(xmlTreeParse(x, useInternal = TRUE))
txt = xmlValue(doc[["latLonList"]])
txt
lat.lon = read.csv(textConnection(gsub(" ", "\\\n", txt)), header = FALSE)
rownames(lat.lon) = strsplit(xmlValue(doc[["cityNameList"]]), "|", fixed = TRUE)[[1]]
g = processWSDL("http://xml.nig.ac.jp/wsdl/ARSA.wsdl")
wsdls = c("http://xml.nig.ac.jp/wsdl/NCBIGenomeAnnotation.wsdl",
"http://xml.nig.ac.jp/wsdl/GetEntry.wsdl",
"http://xml.nig.ac.jp/wsdl/TxSearch.wsdl",
"http://xml.nig.ac.jp/wsdl/Ensembl.wsdl",
"http://xml.nig.ac.jp/wsdl/GTPS.wsdl",
"http://xml.nig.ac.jp/wsdl/Gtop.wsdl",
"http://xml.nig.ac.jp/wsdl/GIBV.wsdl",
"http://xml.nig.ac.jp/wsdl/Gib.wsdl",
"http://xml.nig.ac.jp/wsdl/GIBIS.wsdl",
"http://xml.nig.ac.jp/wsdl/SPS.wsdl",
"http://xml.nig.ac.jp/wsdl/VecScreen.wsdl",
"http://xml.nig.ac.jp/wsdl/PhylogeneticTree.wsdl",
"http://xml.nig.ac.jp/wsdl/Blast.wsdl",
"http://xml.nig.ac.jp/wsdl/ClustalW.wsdl",
"http://xml.nig.ac.jp/wsdl/Mafft.wsdl",
"http://xml.nig.ac.jp/wsdl/RequestManager.wsdl",
"http://xml.nig.ac.jp/wsdl/DDBJ.wsdl",
"http://xml.nig.ac.jp/wsdl/ARSA.wsdl"
)
ifaces = lapply(wsdls, function(w) genSOAPClientInterface(processWSDL(w)))
names(ifaces) = gsub(".wsdl", "", basename(wsdls))
wsdl = "http://soap.genome.jp/KEGG.wsdl"
kegg <- processWSDL(wsdl)
kegg <- processWSDL("C:/Users/scolm/Downloads/KEGG.wsdl")
def = genSOAPClientInterface(def=kegg, verbose = TRUE)
wsdl = processWSDL("C/Users/scolm/Downloads/ndfdXMLserver.wsdl")
wsdl = processWSDL("C:/Users/scolm/Downloads/ndfdXMLserver.wsdl")
wsdl = "C:/Users/scolm/Downloads/nwis.wsdl"
nwis <- processWSDL(wsdl)
readLines(wsdl)
wsdl = "C:/Users/scolm/Downloads/nwis.wsdl"
nwis <- processWSDL(wsdl)
library(SSOAP)
library(XML)
library(RCurl)
def <- processWSDL("C:/Users/scolm/Downloads/EDMSRetrieve-Tibco-Concrete.wsdl")
ff  <- genSOAPClientInterface(def = def)
ff  <- genSOAPClientInterface(def = def)
doc  <- xmlInternalTreeParse("C:/Users/scolm/Downloads/EDMSRetrieve-Tibco-Concrete.wsdl")
doc
def <- processWSDL(doc)
ff  <- genSOAPClientInterface(def = def)
xmlstr.f <- ff@functions #gives the list of functions that can be accessed
sessionInfo()
library(RStan)
Sys.setenv(MAKEFLAGS = "-j4")
source('http://mc-stan.org/rstan/install.R', echo = TRUE, max.deparse.length = 2000)
install_rstan()
schools_code <- '
data {
int<lower=0> J; // number of schools
real y[J]; // estimated treatment effects
real<lower=0> sigma[J]; // s.e. of effect estimates
}
parameters {
real mu;
real<lower=0> tau;
real eta[J];
}
transformed parameters {
real theta[J];
for (j in 1:J)
theta[j] <- mu + tau * eta[j];
}
model {
eta ~ normal(0, 1);
y ~ normal(theta, sigma);
}
'
schools_dat <- list(J = 8,
y = c(28,  8, -3,  7, -1,  1, 18, 12),
sigma = c(15, 10, 16, 11,  9, 11, 10, 18))
fit <- stan(model_code = schools_code, data = schools_dat,
iter = 1000, chains = 4)
plot(fit)
print(fit)
fit
summary(fit)
fit1 <- stan(file = 'C:/Users/scolm/Downloads/8schools.stan', data = schools_dat,
iter = 1000, chains = 4)
list.files("C:/Users/scolm/Downloads")
schools_dat
extract(fit)
head(extract(fit))
fit1 <- stan(file = 'C:/Users/scolm/Downloads/8schools.stan', data = schools_dat,
iter = 1000, chains = 4)
library(rstan)
schools_dat <- list(J = 8,
y = c(28,  8, -3,  7, -1,  1, 18, 12),
sigma = c(15, 10, 16, 11,  9, 11, 10, 18))
fit1 <- stan(file = 'C:/Users/scolm/Downloads/8schools.stan', data = schools_dat,
iter = 1000, chains = 4)
plot(fit1)
lapply(extract(fit1), FUN = head)
install.packages("XML")
library("XML")
data <- xmlParse("C:/Users/scolm/Desktop/Worksheet.xml")
data <- xmlToList(data)
data
data[[1]]
class(data[[1]])
length(data[[1]])
data[[1]][[1]]
data <- xmlParse("http://forecast.weather.gov/MapClick.php?lat=29.803&lon=-82.411&FcstType=digitalDWML")
xml_data <- xmlToList(data)
xml_data
location <- as.list(xml_data[["data"]][["location"]][["point"]])
location
xml_data[["data"]][["location"]][["point"]]
names(xlm_data)
names(xml_data)
data <- xmlParse("C:/Users/scolm/Desktop/Worksheet.xml")
data <- xmlToList(data)
names(data)
sapply(data, names)
lapply(data, names)
lapply(data, FUN = function(L) names(L[["xmlData"]]))
names(data[["xmlData"]][["datastoreItem"]])
?apply
data <- xmlParse("http://forecast.weather.gov/MapClick.php?lat=29.803&lon=-82.411&FcstType=digitalDWML")
data <- xmlParse("C:/Users/scolm/Desktop/Worksheet.xml")
data <- xmlToList(data)
rapply(data, names)
rapply(data[[1]], names)
names(data)
rapply(data[[2]], names)
rapply(data[[3]], names)
rapply(data[[4]], names)
rapply(data[[5]], names)
data <- data.frame(var1 = sample(c('01','02','03'), size=10, replace = TRUE),
var2 = sample(c('01','02','03'), size=10, replace = TRUE),
var3 = sample(c('01','02','03'), size=10, replace = TRUE), stringsAsFactors = FALSE)
var3 = sample(c('01','02','03'), size=10, replace = TRUE), stringsAsFactors = FALSE)
sample(c('01','02','03'), size=10, replace = TRUE)
?data.frame
data.frame(var1 = sample(c('01','02','03'), size=10, replace = TRUE),
var2 = sample(c('01','02','03'), size=10, replace = TRUE),
var3 = sample(c('01','02','03'), size=10, replace = TRUE), stringsAsFactors = FALSE)
data <- data.frame(var1 = sample(c('01','02','03'), size=10, replace = TRUE),
var2 = sample(c('01','02','03'), size=10, replace = TRUE),
var3 = sample(c('01','02','03'), size=10, replace = TRUE), stringsAsFactors = FALSE)
var3 = sample(c('01','02','03'), size=10, replace = TRUE), stringsAsFactors = FALSE)
data
str(data)
library(plyr)
?ldply
data <- ldply(data, .fun = function(v) as.integer(v))
data
str(data)
data <- data.frame(var1 = sample(c('01','02','03'), size=10, replace = TRUE),
var2 = sample(c('01','02','03'), size=10, replace = TRUE),
var3 = sample(c('01','02','03'), size=10, replace = TRUE), stringsAsFactors = FALSE)
data
str(data)
data <- lapply(data, FUN = function(v) as.integer(v))
data
?lapply
data <- data.frame(var1 = sample(c('01','02','03'), size=10, replace = TRUE),
var2 = sample(c('01','02','03'), size=10, replace = TRUE),
var3 = sample(c('01','02','03'), size=10, replace = TRUE), stringsAsFactors = FALSE)
data
str(data)
data <- ldply(data, .fun = function(v) matrix(as.integer(v), ncol = 1))
data
str(data)
data <- data.frame(var1 = sample(c('01','02','03'), size=10, replace = TRUE),
var2 = sample(c('01','02','03'), size=10, replace = TRUE),
var3 = sample(c('01','02','03'), size=10, replace = TRUE), stringsAsFactors = FALSE)
data
data <- lapply(data, FUN = function(v) matrix(as.integer(v), ncol = 1))
data
?as.list
data <- data.frame(var1 = sample(c('01','02','03'), size=10, replace = TRUE),
var2 = sample(c('01','02','03'), size=10, replace = TRUE),
var3 = sample(c('01','02','03'), size=10, replace = TRUE), stringsAsFactors = FALSE)
ddply(data, .fun = function(v) as.integer(v))
ldply(data, .fun = function(v) as.integer(v))
ldply(data, .fun = function(v) t(as.integer(v)))
?ddply
data <- data.frame(var1 = sample(c('01','02','03'), size=10, replace = TRUE),
var2 = sample(c('01','02','03'), size=10, replace = TRUE),
var3 = sample(c('01','02','03'), size=10, replace = TRUE), stringsAsFactors = FALSE)
data
str(data)
data <- lapply(data, FUN = function(v) matrix(as.integer(v), ncol = 1))
data <- do.call('cbind',data)
data
str(data)
data <- data.frame(var1 = sample(c('01','02','03'), size=10, replace = TRUE),
var2 = sample(c('01','02','03'), size=10, replace = TRUE),
var3 = sample(c('01','02','03'), size=10, replace = TRUE), stringsAsFactors = FALSE)
data
str(data)
data <- lapply(data, FUN = function(v) matrix(as.integer(v), ncol = 1))
data <- do.call('data.frame',data)
data
str(data)
data <- data.frame(var1 = sample(c('01','02','03'), size=10, replace = TRUE),
var2 = sample(c('01','02','03'), size=10, replace = TRUE),
var3 = sample(c('01','02','03'), size=10, replace = TRUE), stringsAsFactors = FALSE)
data
str(data)
data <- lapply(data, FUN = function(v) as.integer(v))
data <- do.call('data.frame',data)
data
str(data)
library(foreach)
data <- data.frame(var1 = sample(c('01','02','03'), size=10, replace = TRUE),
var2 = sample(c('01','02','03'), size=10, replace = TRUE),
var3 = sample(c('01','02','03'), size=10, replace = TRUE), stringsAsFactors = FALSE)
data
str(data)
?foreach
data <- foreach(v=colnames(data), .combine=data.frame) %do% as.integer(v)
data <- data.frame(var1 = sample(c('01','02','03'), size=10, replace = TRUE),
var2 = sample(c('01','02','03'), size=10, replace = TRUE),
var3 = sample(c('01','02','03'), size=10, replace = TRUE), stringsAsFactors = FALSE)
data
str(data)
foreach(v=colnames(data), .combine=data.frame) %do% as.integer(data[,v]))
foreach(v=colnames(data), .combine=data.frame) %do% as.integer(data[,v])
data <- foreach(v=colnames(data), .combine=data.frame) %do% as.integer(data[,v])
data
data <- data.frame(var1 = sample(c('01','02','03'), size=10, replace = TRUE),
var2 = sample(c('01','02','03'), size=10, replace = TRUE),
var3 = sample(c('01','02','03'), size=10, replace = TRUE), stringsAsFactors = FALSE)
data
str(data)
data <- foreach(v=colnames(data), .combine=data.frame) %do% as.integer(data[,v])
data
setwd('C:/Users/scolm/Desktop/FOOD_INSPECTIONS/DATA')
list.files()
library(glmnet)
library(ggplot2)
library(maps)
library(snowfall)
install.packages("snowfall")
library(snowfall)
library(sqldf)
CPUs <- 4
setwd('C:/Users/scolm/Desktop/FOOD_INSPECTIONS/CODE')
list.files()
source("myfun.R")
cook <- map_data("county")
cook <- subset(cook,region=="illinois" & subregion=="cook")
source("liveReadInFoodInspections.R")
