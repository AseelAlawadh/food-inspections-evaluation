777+839
173/808
139/777
173 - 139
34/139
datTest[ , period_modeled := ifelse(glm_pred > median(glm_pred), 1, 2)]
datTest[period == 1, sum(criticalFound)]
datTest[period_modeled == 1, sum(criticalFound)]
datTest[, list(.N, Violations = sum(criticalFound)), keyby=list(period)]
datTest[, list(.N, Violations = sum(criticalFound)), keyby=list(period_modeled)]
## Subset test period
## Exact match of actual inspection counts in first half
ratio_of_days <- nrow(datTest[period==1]) / nrow(datTest)
ratio_of_days
datTest[ , period_modeled_strict :=
ifelse(glm_pred > quantile(glm_pred, 1-ratio_of_days), 1, 2)]
datTest[,.N,period_modeled_strict]
datTest[,.N,period]
datTest[, list(.N, Violations = sum(criticalFound)), keyby=list(period)]
datTest[, list(.N, Violations = sum(criticalFound)), keyby=list(period_modeled_strict)]
777+839
install.packages("httr")
library(httr)
library('RUnit')
source("R/RSocrata.R")
setwd("~/Documents/git/RSocrata")
source("R/RSocrata.R")
test.posixifyLong <- function() {
dt <- posixify("09/14/2012 10:38:01 PM")
checkEquals("POSIXlt", class(dt)[1], "first data type of a date")
checkEquals(2012, dt$year + 1900, "year")
checkEquals(9, dt$mon + 1, "month")
checkEquals(14, dt$mday, "day")
checkEquals(22, dt$hour, "hours")
checkEquals(38, dt$min, "minutes")
checkEquals(1, dt$sec, "seconds")
}
test.readSocrataCsv <- function() {
df <- read.socrata('https://soda.demo.socrata.com/resource/4334-bgaj.csv')
checkEquals(1007, nrow(df), "rows")
checkEquals(9, ncol(df), "columns")
}
test.readSocrataCsv()
httr
httr()
?guess_media
?guess_type
setwd("~/Documents/git/RSocrata")
library('RUnit')
source("R/RSocrata.R")
test.readSocrataCsv <- function() {
df <- read.socrata('https://soda.demo.socrata.com/resource/4334-bgaj.csv')
checkEquals(1007, nrow(df), "rows")
checkEquals(9, ncol(df), "columns")
}
test.readSocrataCsv()
test.readSocrataJson <- function() {
df <- read.socrata('https://soda.demo.socrata.com/resource/4334-bgaj.json')
checkEquals(1007, nrow(df), "rows")
checkEquals(11, ncol(df), "columns")
}
test.readSocrataJson()
test.readSocrataNoScheme <- function() {
checkException(read.socrata('soda.demo.socrata.com/resource/4334-bgaj.csv'))
}
test.readSocrataNoScheme
test.readSocrataNoScheme()
test.readSoQL <- function() {
df <- read.socrata('http://soda.demo.socrata.com/resource/4334-bgaj.csv?$select=region')
checkEquals(1007, nrow(df), "rows")
checkEquals(1, ncol(df), "columns")
}
test.readSoQL()
test.readSoQLColumnNotFound <- function() {
# SoQL API uses field names, not human names
checkException(read.socrata('http://soda.demo.socrata.com/resource/4334-bgaj.csv?$select=Region'))
}
test.posixifyLong <- function() {
dt <- posixify("09/14/2012 10:38:01 PM")
checkEquals("POSIXlt", class(dt)[1], "first data type of a date")
checkEquals(2012, dt$year + 1900, "year")
checkEquals(9, dt$mon + 1, "month")
checkEquals(14, dt$mday, "day")
checkEquals(22, dt$hour, "hours")
checkEquals(38, dt$min, "minutes")
checkEquals(1, dt$sec, "seconds")
}
test.posixifyShort <- function() {
dt <- posixify("09/14/2012")
checkEquals("POSIXlt", class(dt)[1], "first data type of a date")
checkEquals(2012, dt$year + 1900, "year")
checkEquals(9, dt$mon + 1, "month")
checkEquals(14, dt$mday, "day")
checkEquals(0, dt$hour, "hours")
checkEquals(0, dt$min, "minutes")
checkEquals(0, dt$sec, "seconds")
}
test.readSocrataCsv <- function() {
df <- read.socrata('https://soda.demo.socrata.com/resource/4334-bgaj.csv')
checkEquals(1007, nrow(df), "rows")
checkEquals(9, ncol(df), "columns")
}
test.readSocrataJson <- function() {
df <- read.socrata('https://soda.demo.socrata.com/resource/4334-bgaj.json')
checkEquals(1007, nrow(df), "rows")
checkEquals(11, ncol(df), "columns")
}
test.readSocrataNoScheme <- function() {
checkException(read.socrata('soda.demo.socrata.com/resource/4334-bgaj.csv'))
}
test.readSoQL <- function() {
df <- read.socrata('http://soda.demo.socrata.com/resource/4334-bgaj.csv?$select=region')
checkEquals(1007, nrow(df), "rows")
checkEquals(1, ncol(df), "columns")
}
test.readSoQLColumnNotFound <- function() {
# SoQL API uses field names, not human names
checkException(read.socrata('http://soda.demo.socrata.com/resource/4334-bgaj.csv?$select=Region'))
}
test.readSocrataHumanReadable <- function() {
df <- read.socrata('https://soda.demo.socrata.com/dataset/USGS-Earthquake-Reports/4334-bgaj')
checkEquals(1007, nrow(df), "rows")
checkEquals(9, ncol(df), "columns")
}
test.readSocrataFormatNotSupported <- function() {
# Unsupported data formats
checkException(read.socrata('http://soda.demo.socrata.com/resource/4334-bgaj.xml'))
}
test.readSocrataCalendarDateLong <- function() {
df <- read.socrata('http://soda.demo.socrata.com/resource/4334-bgaj.csv')
dt <- df$Datetime[1] # "2012-09-14 22:38:01"
checkEquals("POSIXlt", class(dt)[1], "data type of a date")
checkEquals(2012, dt$year + 1900, "year")
checkEquals(9, dt$mon + 1, "month")
checkEquals(14, dt$mday, "day")
checkEquals(22, dt$hour, "hours")
checkEquals(38, dt$min, "minutes")
checkEquals(1, dt$sec, "seconds")
}
test.readSocrataCalendarDateShort <- function() {
df <- read.socrata('http://data.cityofchicago.org/resource/y93d-d9e3.csv?$order=debarment_date')
dt <- df$DEBARMENT.DATE[1] # "05/21/1981"
checkEquals("POSIXlt", class(dt)[1], "data type of a date")
checkEquals(81, dt$year, "year")
checkEquals(5, dt$mon + 1, "month")
checkEquals(21, dt$mday, "day")
checkEquals(0, dt$hour, "hours")
checkEquals(0, dt$min, "minutes")
checkEquals(0, dt$sec, "seconds")
}
test.isFourByFour <- function() {
checkTrue(isFourByFour("4334-bgaj"), "ok")
checkTrue(!isFourByFour("4334c-bgajc"), "11 characters instead of 9")
checkTrue(!isFourByFour("433-bga"), "7 characters instead of 9")
checkTrue(!isFourByFour("433-bgaj"), "3 characters before dash instead of 4")
checkTrue(!isFourByFour("4334-!gaj"), "non-alphanumeric character")
}
test.isFourByFourUrl <- function() {
checkException(read.socrata("https://soda.demo.socrata.com/api/views/4334c-bgajc"), "11 characters instead of 9")
checkException(read.socrata("https://soda.demo.socrata.com/api/views/433-bga"), "7 characters instead of 9")
checkException(read.socrata("https://soda.demo.socrata.com/api/views/433-bgaj"), "3 characters before dash instead of 4")
checkException(read.socrata("https://soda.demo.socrata.com/api/views/4334-!gaj"), "non-alphanumeric character")
}
test.readSocrataInvalidUrl <- function() {
checkException(read.socrata("a.fake.url.being.tested"), "invalid url")
}
test.suite <- defineTestSuite("test Socrata SODA interface",
dirs = file.path("R/tests"),
testFileRegexp = '^test.*\\.R')
runAllTests <- function() {
test.result <- runTestSuite(test.suite)
printTextProtocol(test.result)
}
runAllTests()
library('RUnit')
source("R/RSocrata.R")
test.posixifyLong <- function() {
dt <- posixify("09/14/2012 10:38:01 PM")
checkEquals("POSIXlt", class(dt)[1], "first data type of a date")
checkEquals(2012, dt$year + 1900, "year")
checkEquals(9, dt$mon + 1, "month")
checkEquals(14, dt$mday, "day")
checkEquals(22, dt$hour, "hours")
checkEquals(38, dt$min, "minutes")
checkEquals(1, dt$sec, "seconds")
}
test.posixifyShort <- function() {
dt <- posixify("09/14/2012")
checkEquals("POSIXlt", class(dt)[1], "first data type of a date")
checkEquals(2012, dt$year + 1900, "year")
checkEquals(9, dt$mon + 1, "month")
checkEquals(14, dt$mday, "day")
checkEquals(0, dt$hour, "hours")
checkEquals(0, dt$min, "minutes")
checkEquals(0, dt$sec, "seconds")
}
test.readSocrataCsv <- function() {
df <- read.socrata('https://soda.demo.socrata.com/resource/4334-bgaj.csv')
checkEquals(1007, nrow(df), "rows")
checkEquals(9, ncol(df), "columns")
}
test.readSocrataJson <- function() {
df <- read.socrata('https://soda.demo.socrata.com/resource/4334-bgaj.json')
checkEquals(1007, nrow(df), "rows")
checkEquals(11, ncol(df), "columns")
}
test.readSocrataNoScheme <- function() {
checkException(read.socrata('soda.demo.socrata.com/resource/4334-bgaj.csv'))
}
test.readSoQL <- function() {
df <- read.socrata('http://soda.demo.socrata.com/resource/4334-bgaj.csv?$select=region')
checkEquals(1007, nrow(df), "rows")
checkEquals(1, ncol(df), "columns")
}
test.readSoQLColumnNotFound <- function() {
# SoQL API uses field names, not human names
checkException(read.socrata('http://soda.demo.socrata.com/resource/4334-bgaj.csv?$select=Region'))
}
test.readSocrataHumanReadable <- function() {
df <- read.socrata('https://soda.demo.socrata.com/dataset/USGS-Earthquake-Reports/4334-bgaj')
checkEquals(1007, nrow(df), "rows")
checkEquals(9, ncol(df), "columns")
}
test.readSocrataFormatNotSupported <- function() {
# Unsupported data formats
checkException(read.socrata('http://soda.demo.socrata.com/resource/4334-bgaj.xml'))
}
test.readSocrataCalendarDateLong <- function() {
df <- read.socrata('http://soda.demo.socrata.com/resource/4334-bgaj.csv')
dt <- df$Datetime[1] # "2012-09-14 22:38:01"
checkEquals("POSIXlt", class(dt)[1], "data type of a date")
checkEquals(2012, dt$year + 1900, "year")
checkEquals(9, dt$mon + 1, "month")
checkEquals(14, dt$mday, "day")
checkEquals(22, dt$hour, "hours")
checkEquals(38, dt$min, "minutes")
checkEquals(1, dt$sec, "seconds")
}
test.readSocrataCalendarDateShort <- function() {
df <- read.socrata('http://data.cityofchicago.org/resource/y93d-d9e3.csv?$order=debarment_date')
dt <- df$DEBARMENT.DATE[1] # "05/21/1981"
checkEquals("POSIXlt", class(dt)[1], "data type of a date")
checkEquals(81, dt$year, "year")
checkEquals(5, dt$mon + 1, "month")
checkEquals(21, dt$mday, "day")
checkEquals(0, dt$hour, "hours")
checkEquals(0, dt$min, "minutes")
checkEquals(0, dt$sec, "seconds")
}
test.isFourByFour <- function() {
checkTrue(isFourByFour("4334-bgaj"), "ok")
checkTrue(!isFourByFour("4334c-bgajc"), "11 characters instead of 9")
checkTrue(!isFourByFour("433-bga"), "7 characters instead of 9")
checkTrue(!isFourByFour("433-bgaj"), "3 characters before dash instead of 4")
checkTrue(!isFourByFour("4334-!gaj"), "non-alphanumeric character")
}
test.isFourByFourUrl <- function() {
checkException(read.socrata("https://soda.demo.socrata.com/api/views/4334c-bgajc"), "11 characters instead of 9")
checkException(read.socrata("https://soda.demo.socrata.com/api/views/433-bga"), "7 characters instead of 9")
checkException(read.socrata("https://soda.demo.socrata.com/api/views/433-bgaj"), "3 characters before dash instead of 4")
checkException(read.socrata("https://soda.demo.socrata.com/api/views/4334-!gaj"), "non-alphanumeric character")
}
test.readSocrataInvalidUrl <- function() {
checkException(read.socrata("a.fake.url.being.tested"), "invalid url")
}
test.suite <- defineTestSuite("test Socrata SODA interface",
dirs = file.path("R/tests"),
testFileRegexp = '^test.*\\.R')
runAllTests <- function() {
test.result <- runTestSuite(test.suite)
printTextProtocol(test.result)
}
runAllTests()
person("City of Chicago", email="developers@cityofchicago.org")
person("Hugh", "Devlin, Ph. D.", role = c("cre","aut"), email="hugh.devlin@cityofchicago.org"
)
c(person("Hugh", "Devlin, Ph. D.", role = c("cre","aut"), email="hugh.devlin@cityofchicago.org"),
person("Tom", "Schenk, Jr.", role="aut", email="tom.schenk@cityofchicago.org"),
person("City of Chicago", role="cph", email="developers@cityofchicago.org"))
R CMD
source('~/.active-rstudio-document')
source("REPORTS/style.R")
warnings()
.libPaths()
d <- read.csv("https://data.cityofchicago.org/api/views/4ijn-s7e5/rows.csv")
RSocrata
library(RSocrata)
library(RSocrata)
d <- read.socrata("https://data.cityofchicago.org/Health-Human-Services/Food-Inspections/4ijn-s7e5")
str(d)
xmat
```{r, echo=FALSE, warning=FALSE, results='hide', message=FALSE}
##==============================================================================
## INITIALIZE
##==============================================================================
## Remove all objects; perform garbage collection
rm(list=ls())
gc(reset=TRUE)
## Check for dependencies
if(!"geneorama" %in% rownames(installed.packages())){
if(!"devtools" %in% rownames(installed.packages())){
install.packages('devtools')}
devtools::install_github('geneorama/geneorama')}
## Load libraries
library(RSocrata)
geneorama::detach_nonstandard_packages()
geneorama::loadinstall_libraries(c("data.table", "ggplot2", "knitr", "glmnet"))
geneorama::set_project_dir("food-inspections-evaluation")
geneorama::sourceDir("CODE/functions/")
## Globally turn off "fixing" indenting for code chunks
opts_chunk$set(tidy = FALSE)
## Set figure output
opts_knit$set(fig.path = "assets/figure")
## Navigate to the top level directory
geneorama::set_project_dir("food-inspections-evaluation")
##==============================================================================
## DEFINE GLOBAL VARIABLES / MANUAL CODE
##==============================================================================
## Select data version
DataDir <- "DATA/20141110"
##==============================================================================
## LOAD CACHED RDS FILES AND MODIFY DATA FOR MODEL
##==============================================================================
dat <- readRDS(file.path(DataDir, "dat_with_inspector.Rds"))
## Remove NA's
dat[,.N,is.na(heat_burglary)]
dat <- dat[!is.na(heat_burglary)]
## Add criticalFound variable to dat:
dat[ , criticalFound := pmin(1, criticalCount)]
## Set the key for dat
setkey(dat, Inspection_ID)
## Match time period of original results
# dat <- dat[Inspection_Date < "2013-09-01" | Inspection_Date > "2014-07-01"]
dat[, .N, Results]
## Remove records where an inspection didn't happen
dat <- dat[!Results %in% c('Out of Business','Business Not Located','No Entry')]
##==============================================================================
## CREATE MODEL DATA
##==============================================================================
xmat <- dat[ , list(criticalFound,
Inspector_Assigned,
pastSerious = pmin(pastSerious, 1),
ageAtInspection = ifelse(ageAtInspection > 4, 1L, 0L),
pastCritical = pmin(pastCritical, 1),
consumption_on_premises_incidental_activity,
tobacco_retail_over_counter,
temperatureMax,
heat_burglary = pmin(heat_burglary, 70),
heat_sanitation = pmin(heat_sanitation, 70),
heat_garbage = pmin(heat_garbage, 50),
# risk = as.factor(Risk),
# facility_type = as.factor(Facility_Type),
timeSinceLast),
keyby = Inspection_ID]
mm <- model.matrix(criticalFound ~ . -1, data=xmat[ , -1, with=F])
mm <- as.data.table(mm)
##==============================================================================
## CREATE TEST / TRAIN PARTITIONS
##==============================================================================
iiTrain <- dat[ , which(Inspection_Date < "2014-07-01")]
iiTest <- dat[ , which(Inspection_Date > "2014-07-01")]
##==============================================================================
## GLMNET MODEL
##==============================================================================
# fit ridge regression, alpha = 0, only inspector coefficients penalized
pen <- ifelse(grepl("^Inspector.Assigned", colnames(mm)), 1, 0)
model <- glmnet(x = as.matrix(mm[iiTrain]),
y = xmat[iiTrain,  criticalFound],
family = "binomial", alpha = 0, penalty.factor = pen)
w.lam <- 100
lam <- model$lambda[w.lam]
coef <- model$beta[,w.lam]
coefInsp <- coef[grepl("^Inspector.Assigned",names(coef))]
coefInsp <- coefInsp[order(-coefInsp)]
coefNonInsp <- coef[!grepl("^Inspector.Assigned",names(coef))]
## ATTACH PREDICTIONS TO DAT
dat$glm_pred <- predict(model, newx=as.matrix(mm), s=lam, type="response")[,1]
```
dat$glm_pred <- predict(model, newx=as.matrix(mm), s=lam, type="response")[,1]
xmat
str(xmat)
dim(xmat)
str(dat)
table(dat$Risk)
prop.table(dat$Risk)
margin.table(dat$Risk)
table(data$Risk)
table(dat$Risk)
str(table(dat$Risk))
sum(table(dat$Risk))
table(dat$Risk)[1]
table(dat$Risk)[1]/sum(table(dat$Risk))
percent(table(dat$Risk)[1]/sum(table(dat$Risk)))
format(round(table(dat$Risk)[1]/sum(table(dat$Risk)), 0), nsmall=0)
format(round(table(dat$Risk)[1]/sum(table(dat$Risk)), 0), nsmall=2
)
format(round(table(dat$Risk)[1]/sum(table(dat$Risk)), 2), nsmall=2)
install.packages('scales')
install.packages("scales")
library(scales)
percent()
percent(format(round(table(dat$Risk)[1]/sum(table(dat$Risk)), 2), nsmall=2))
percent(table(dat$Risk)[1]/sum(table(dat$Risk)))
percent
str(d)
str(dat)
levels(dat$Inspection_Type)
dat$Inspection_Type
str(dat$Inspection_Type)
table(dat$Inspection_Type)
dat[iiTest, range(Inspection_Date)]
dat[iiTest, range(Inspection_Date)][1]
str(dat0)
str(dat)
iiTest
dat[iiTest, .N]
##==============================================================================
## INITIALIZE
##==============================================================================
## Remove all objects; perform garbage collection
rm(list=ls())
gc(reset=TRUE)
## Check for dependencies
if(!"geneorama" %in% rownames(installed.packages())){
if(!"devtools" %in% rownames(installed.packages())){
install.packages('devtools')}
devtools::install_github('geneorama/geneorama')}
## Load libraries
geneorama::detach_nonstandard_packages()
geneorama::loadinstall_libraries(c("data.table", "ggplot2", "knitr", "glmnet"))
geneorama::set_project_dir("food-inspections-evaluation")
geneorama::sourceDir("CODE/functions/")
library(RSocrata)
library(scales)
## Globally turn off "fixing" indenting for code chunks
opts_chunk$set(tidy = FALSE)
## Set figure output
opts_knit$set(fig.path = "assets/figure")
## Navigate to the top level directory
geneorama::set_project_dir("food-inspections-evaluation")
##==============================================================================
## DEFINE GLOBAL VARIABLES / MANUAL CODE
##==============================================================================
## Select data version
DataDir <- "DATA/20141110"
##==============================================================================
## LOAD CACHED RDS FILES AND MODIFY DATA FOR MODEL
##==============================================================================
dat <- readRDS(file.path(DataDir, "dat_with_inspector.Rds"))
## Remove NA's
dat[,.N,is.na(heat_burglary)]
dat <- dat[!is.na(heat_burglary)]
## Add criticalFound variable to dat:
dat[ , criticalFound := pmin(1, criticalCount)]
## Set the key for dat
setkey(dat, Inspection_ID)
## Match time period of original results
# dat <- dat[Inspection_Date < "2013-09-01" | Inspection_Date > "2014-07-01"]
dat[, .N, Results]
## Remove records where an inspection didn't happen
dat <- dat[!Results %in% c('Out of Business','Business Not Located','No Entry')]
##==============================================================================
## CREATE MODEL DATA
##==============================================================================
xmat <- dat[ , list(criticalFound,
Inspector_Assigned,
pastSerious = pmin(pastSerious, 1),
ageAtInspection = ifelse(ageAtInspection > 4, 1L, 0L),
pastCritical = pmin(pastCritical, 1),
consumption_on_premises_incidental_activity,
tobacco_retail_over_counter,
temperatureMax,
heat_burglary = pmin(heat_burglary, 70),
heat_sanitation = pmin(heat_sanitation, 70),
heat_garbage = pmin(heat_garbage, 50),
# risk = as.factor(Risk),
# facility_type = as.factor(Facility_Type),
timeSinceLast),
keyby = Inspection_ID]
mm <- model.matrix(criticalFound ~ . -1, data=xmat[ , -1, with=F])
mm <- as.data.table(mm)
##==============================================================================
## CREATE TEST / TRAIN PARTITIONS
##==============================================================================
iiTrain <- dat[ , which(Inspection_Date < "2014-07-01")]
iiTest <- dat[ , which(Inspection_Date > "2014-07-01")]
##==============================================================================
## GLMNET MODEL
##==============================================================================
# fit ridge regression, alpha = 0, only inspector coefficients penalized
pen <- ifelse(grepl("^Inspector.Assigned", colnames(mm)), 1, 0)
model <- glmnet(x = as.matrix(mm[iiTrain]),
y = xmat[iiTrain,  criticalFound],
family = "binomial", alpha = 0, penalty.factor = pen)
w.lam <- 100
lam <- model$lambda[w.lam]
coef <- model$beta[,w.lam]
coefInsp <- coef[grepl("^Inspector.Assigned",names(coef))]
coefInsp <- coefInsp[order(-coefInsp)]
coefNonInsp <- coef[!grepl("^Inspector.Assigned",names(coef))]
## ATTACH PREDICTIONS TO DAT
dat$glm_pred <- predict(model, newx=as.matrix(mm), s=lam, type="response")[,1]
dat[iiTest, .N]
dat[iiTest, range(Inspection_Date)][1]
dat[iiTest, range(Inspection_Date)][2]
dat[iiTest, range(Inspection_Date)][1]
dat[iiTest, range(Inspection_Date)][2]
CDPH completed ```r dat[iiTest, .N]``` inspections between ```r dat[iiTest, range(Inspection_Date)][1]``` and ```r dat[iiTest, range(Inspection_Date)][2]```.
dat[iiTest, gini(glm_pred, criticalFound, plot=TRUE)]
dat[iiTest, sum(criticalCount)]
dat[iiTest, sum(criticalFound)]
dat[iiTest, gini(glm_pred, criticalFound, plot=TRUE)]
